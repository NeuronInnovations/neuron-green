[
    {
        "id": "63e754a63a87b5d0",
        "type": "tab",
        "label": "P2P chat demo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1ea0e1fb2d023730",
        "type": "seller",
        "z": "63e754a63a87b5d0",
        "name": "Seller",
        "deviceRole": "test",
        "deviceName": "test",
        "smartContract": "challenges",
        "serialNumber": "test",
        "deviceType": "test",
        "price": "1",
        "description": "",
        "buyerEvmAddress": "[\"0x3B5BF7a4e2d8E859d555c84aF740AbfEC63Afa52\"]",
        "buyerDevices": [],
        "x": 130,
        "y": 80,
        "wires": []
    },
    {
        "id": "bf5d51502d0569a5",
        "type": "buyer",
        "z": "63e754a63a87b5d0",
        "name": "Buyer",
        "sellerEvmAddress": "[\"0x4f5e21e5509Dc8487d8418a030bd2304391EA04E\"]",
        "sellerDevices": [],
        "smartContract": "challenges",
        "deviceType": "wtrrwe",
        "description": "",
        "x": 130,
        "y": 300,
        "wires": []
    },
    {
        "id": "5f949d61faf50af0",
        "type": "neuron-p2p",
        "z": "63e754a63a87b5d0",
        "name": "Buyer P2P",
        "selectedNode": "bf5d51502d0569a5",
        "description": "",
        "x": 510,
        "y": 360,
        "wires": [
            [
                "4e4b6386dd8d7479",
                "ce9375434e64b142"
            ]
        ]
    },
    {
        "id": "f63f1d72f957bea3",
        "type": "debug",
        "z": "63e754a63a87b5d0",
        "name": "seller node",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 140,
        "wires": []
    },
    {
        "id": "98f339bfdf179818",
        "type": "neuron-p2p",
        "z": "63e754a63a87b5d0",
        "name": "Seller P2P",
        "selectedNode": "1ea0e1fb2d023730",
        "description": "",
        "x": 490,
        "y": 140,
        "wires": [
            [
                "f63f1d72f957bea3",
                "ec50e49ac6701815"
            ]
        ]
    },
    {
        "id": "4e4b6386dd8d7479",
        "type": "debug",
        "z": "63e754a63a87b5d0",
        "name": "buyer node",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 360,
        "wires": []
    },
    {
        "id": "ce9375434e64b142",
        "type": "ui_template",
        "z": "63e754a63a87b5d0",
        "group": "d6928ace43c87da0",
        "name": "Buyer Chat",
        "order": 0,
        "width": "6",
        "height": "15",
        "format": "<style>\n  .chat-container {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    background-color: #f8f9fa;\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n    margin-top: 10px;\n  }\n\n  .message-panel {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding: 16px;\n    background-color: #ffffff;\n  }\n\n  .message {\n    max-width: 80%;\n    padding: 10px 14px;\n    margin-bottom: 12px;\n    border-radius: 18px;\n    line-height: 1.4;\n    position: relative;\n    word-wrap: break-word;\n    animation: fadeIn 0.3s ease-out;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  .user-message {\n    background-color: #007bff;\n    color: white;\n    margin-left: auto;\n    border-bottom-right-radius: 4px;\n  }\n\n  .other-message {\n    background-color: #e9ecef;\n    color: #212529;\n    margin-right: auto;\n    border-bottom-left-radius: 4px;\n  }\n\n  .timestamp {\n    font-size: 11px;\n    opacity: 0.8;\n    margin-top: 4px;\n    text-align: right;\n  }\n\n  .input-area {\n    display: flex;\n    padding: 12px;\n    background-color: #ffffff;\n    border-top: 1px solid #dee2e6;\n  }\n\n  #chat-input {\n    flex-grow: 1;\n    padding: 10px 14px;\n    border: 1px solid #ced4da;\n    border-radius: 20px;\n    outline: none;\n    font-size: 14px;\n  }\n\n  #chat-input:focus {\n    border-color: #007bff;\n  }\n\n  #send-button {\n    margin-left: 10px;\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 20px;\n    cursor: pointer;\n    font-size: 14px;\n  }\n\n  #send-button:hover {\n    background-color: #0069d9;\n  }\n\n  #send-button:disabled {\n    background-color: #adb5bd;\n    cursor: not-allowed;\n  }\n\n  .typing-indicator {\n    display: flex;\n    padding: 8px 16px;\n    justify-content: flex-start;\n    gap: 4px;\n  }\n\n  .typing-dot {\n    width: 8px;\n    height: 8px;\n    background-color: #6c757d;\n    border-radius: 50%;\n    animation: typingAnimation 1.4s infinite ease-in-out;\n  }\n\n  .typing-dot:nth-child(1) {\n    animation-delay: 0s;\n  }\n\n  .typing-dot:nth-child(2) {\n    animation-delay: 0.2s;\n  }\n\n  .typing-dot:nth-child(3) {\n    animation-delay: 0.4s;\n  }\n\n  @keyframes typingAnimation {\n\n    0%,\n    60%,\n    100% {\n      transform: translateY(0);\n    }\n\n    30% {\n      transform: translateY(-4px);\n    }\n  }\n</style>\n\n<div class=\"chat-container\">\n  <div id=\"message-panel\" class=\"message-panel\"></div>\n  <div id=\"typing-indicator\" class=\"typing-indicator\" style=\"display: none;\">\n    <div class=\"typing-dot\"></div>\n    <div class=\"typing-dot\"></div>\n    <div class=\"typing-dot\"></div>\n  </div>\n  <div class=\"input-area\">\n    <input type=\"text\" id=\"chat-input\" placeholder=\"Type your message...\" autocomplete=\"off\" />\n    <button id=\"send-button\" disabled>Send</button>\n  </div>\n</div>\n\n<script>\n  (function(scope) {\n  const state = {\n    messageCount: 0,\n    isTyping: false,\n    pendingMessages: new Set()\n  };\n  \n  const messagePanel = document.getElementById('message-panel');\n  const chatInput = document.getElementById('chat-input');\n  const sendButton = document.getElementById('send-button');\n  const typingIndicator = document.getElementById('typing-indicator');\n  \n  function formatTimestamp(date = new Date()) {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  }\n  \n  function scrollToBottom() {\n    messagePanel.scrollTop = messagePanel.scrollHeight;\n  }\n  \n  function addMessage(text, sender, timestamp, messageId) {\n    const id = messageId || 'msg-' + state.messageCount++ + '-' + Date.now();\n    \n    if (state.pendingMessages.has(id)) return;\n    state.pendingMessages.add(id);\n    \n    const messageElement = document.createElement('div');\n    messageElement.className = `message ${sender}-message`;\n    messageElement.id = id;\n    messageElement.innerHTML = `\n      ${text}\n      <div class=\"timestamp\">${formatTimestamp(timestamp ? new Date(timestamp) : new Date())}</div>\n    `;\n    \n    messagePanel.appendChild(messageElement);\n    scrollToBottom();\n  }\n  \n  function updateSendButton() {\n    sendButton.disabled = chatInput.value.trim() === '';\n  }\n  \n  function sendMessage() {\n    const messageText = chatInput.value.trim();\n    if (!messageText) return;\n    \n    const timestamp = new Date();\n    const messageId = 'user-msg-' + Date.now();\n    \n    // Add to UI immediately with unique ID\n    addMessage(messageText, 'user', timestamp, messageId);\n    \n    // Send to Node-RED with a different ID to prevent echo\n    if (typeof scope.send === 'function') {\n      scope.send({ \n        payload: { \n          text: messageText, \n          sender: 'user',\n          timestamp: timestamp.toISOString(),\n          messageId: 'net-' + messageId, // Different prefix for network messages\n          instance: 'chat',\n          source: 'local' // Mark as locally originated\n        } \n      });\n    }\n    \n    chatInput.value = '';\n    updateSendButton();\n    chatInput.focus();\n  }\n  \n  // Event listeners\n  sendButton.addEventListener('click', sendMessage);\n  \n  chatInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  });\n  \n  chatInput.addEventListener('input', updateSendButton);\n  \n  // Handle incoming messages\n  scope.$watch('msg', function(msg) {\n    if (!msg || !msg.payload) return;\n    \n    try {\n      // Skip locally originated messages that come back\n      if (msg.payload.source === 'local') return;\n      \n      // Handle typing indicator\n      if (msg.payload.typing !== undefined) {\n        typingIndicator.style.display = msg.payload.typing ? 'flex' : 'none';\n        scrollToBottom();\n        return;\n      }\n      \n      // Process message\n      let messageText, messageSender, timestamp, messageId;\n      \n      if (typeof msg.payload === 'string') {\n        const payload = JSON.parse(msg.payload);\n        messageText = payload.text;\n       // messageText = msg.payload;\n        messageSender = 'other';\n        timestamp = new Date();\n        messageId = 'other-msg-' + Date.now();\n      } \n      else if (typeof msg.payload === 'object') {\n        // Skip if this is a network echo of our own message\n        if (msg.payload.messageId && msg.payload.messageId.startsWith('net-user-msg-')) return;\n        \n        messageId = msg.payload.messageId || 'other-msg-' + Date.now();\n        messageText = msg.payload.text || '';\n        messageSender = msg.payload.sender === 'user' ? 'user' : 'other';\n        timestamp = msg.payload.timestamp || new Date();\n      }\n      \n      if (messageText && !state.pendingMessages.has(messageId)) {\n        addMessage(messageText, messageSender, timestamp, messageId);\n      }\n    } catch (error) {\n      console.error(\"Error processing message:\", error);\n    }\n  });\n  \n  // Focus input on load\n  chatInput.focus();\n\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 190,
        "y": 360,
        "wires": [
            [
                "5f949d61faf50af0"
            ]
        ]
    },
    {
        "id": "ec50e49ac6701815",
        "type": "ui_template",
        "z": "63e754a63a87b5d0",
        "group": "84e6cabba255cc18",
        "name": "Seller Chat",
        "order": 0,
        "width": "6",
        "height": "15",
        "format": "<style>\n  .chat-container-2 {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    background-color: #f8f9fa;\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n    margin-top: 10px;\n  }\n\n  .message-panel-2 {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding: 16px;\n    background-color: #ffffff;\n  }\n\n  .message {\n    max-width: 80%;\n    padding: 10px 14px;\n    margin-bottom: 12px;\n    border-radius: 18px;\n    line-height: 1.4;\n    position: relative;\n    word-wrap: break-word;\n    animation: fadeIn 0.3s ease-out;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  .user-message {\n    background-color: #007bff;\n    color: white;\n    margin-left: auto;\n    border-bottom-right-radius: 4px;\n  }\n\n  .other-message {\n    background-color: #e9ecef;\n    color: #212529;\n    margin-right: auto;\n    border-bottom-left-radius: 4px;\n  }\n\n  .timestamp {\n    font-size: 11px;\n    opacity: 0.8;\n    margin-top: 4px;\n    text-align: right;\n  }\n\n  .input-area {\n    display: flex;\n    padding: 12px;\n    background-color: #ffffff;\n    border-top: 1px solid #dee2e6;\n  }\n\n  #chat-input-2 {\n    flex-grow: 1;\n    padding: 10px 14px;\n    border: 1px solid #ced4da;\n    border-radius: 20px;\n    outline: none;\n    font-size: 14px;\n  }\n\n  #chat-input-2:focus {\n    border-color: #007bff;\n  }\n\n  #send-button-2 {\n    margin-left: 10px;\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 20px;\n    cursor: pointer;\n    font-size: 14px;\n  }\n\n  #send-button-2:hover {\n    background-color: #0069d9;\n  }\n\n  #send-button-2:disabled {\n    background-color: #adb5bd;\n    cursor: not-allowed;\n  }\n\n  .typing-indicator {\n    display: flex;\n    padding: 8px 16px;\n    justify-content: flex-start;\n    gap: 4px;\n  }\n\n  .typing-dot {\n    width: 8px;\n    height: 8px;\n    background-color: #6c757d;\n    border-radius: 50%;\n    animation: typingAnimation 1.4s infinite ease-in-out;\n  }\n\n  .typing-dot:nth-child(1) {\n    animation-delay: 0s;\n  }\n\n  .typing-dot:nth-child(2) {\n    animation-delay: 0.2s;\n  }\n\n  .typing-dot:nth-child(3) {\n    animation-delay: 0.4s;\n  }\n\n  @keyframes typingAnimation {\n\n    0%,\n    60%,\n    100% {\n      transform: translateY(0);\n    }\n\n    30% {\n      transform: translateY(-4px);\n    }\n  }\n</style>\n\n<div class=\"chat-container-2\">\n  <div id=\"message-panel-2\" class=\"message-panel-2\"></div>\n  <div id=\"typing-indicator-2\" class=\"typing-indicator\" style=\"display: none;\">\n    <div class=\"typing-dot\"></div>\n    <div class=\"typing-dot\"></div>\n    <div class=\"typing-dot\"></div>\n  </div>\n  <div class=\"input-area\">\n    <input type=\"text\" id=\"chat-input-2\" placeholder=\"Type your message...\" autocomplete=\"off\" />\n    <button id=\"send-button-2\" disabled>Send</button>\n  </div>\n</div>\n\n<script>\n  (function(scope) {\n  const state = {\n    messageCount: 0,\n    isTyping: false,\n    pendingMessages: new Set()\n  };\n  \n  const messagePanel = document.getElementById('message-panel-2');\n  const chatInput = document.getElementById('chat-input-2');\n  const sendButton = document.getElementById('send-button-2');\n  const typingIndicator = document.getElementById('typing-indicator-2');\n  \n  function formatTimestamp(date = new Date()) {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  }\n  \n  function scrollToBottom() {\n    messagePanel.scrollTop = messagePanel.scrollHeight;\n  }\n  \n  function addMessage(text, sender, timestamp, messageId) {\n    const id = messageId || 'msg-' + state.messageCount++ + '-' + Date.now();\n    \n    if (state.pendingMessages.has(id)) return;\n    state.pendingMessages.add(id);\n    \n    const messageElement = document.createElement('div');\n    messageElement.className = `message ${sender}-message`;\n    messageElement.id = id;\n    messageElement.innerHTML = `\n      ${text}\n      <div class=\"timestamp\">${formatTimestamp(timestamp ? new Date(timestamp) : new Date())}</div>\n    `;\n    \n    messagePanel.appendChild(messageElement);\n    scrollToBottom();\n  }\n  \n  function updateSendButton() {\n    sendButton.disabled = chatInput.value.trim() === '';\n  }\n  \n  function sendMessage() {\n    const messageText = chatInput.value.trim();\n    if (!messageText) return;\n    \n    const timestamp = new Date();\n    const messageId = 'user-msg-2-' + Date.now();\n    \n    // Add to UI immediately with unique ID\n    addMessage(messageText, 'user', timestamp, messageId);\n    \n    // Send to Node-RED with a different ID to prevent echo\n    if (typeof scope.send === 'function') {\n      scope.send({ \n        payload: { \n          text: messageText, \n          sender: 'user',\n          timestamp: timestamp.toISOString(),\n          messageId: 'net-' + messageId, // Different prefix for network messages\n          instance: 'chat-2',\n          source: 'local' // Mark as locally originated\n        } \n      });\n    }\n    \n    chatInput.value = '';\n    updateSendButton();\n    chatInput.focus();\n  }\n  \n  // Event listeners\n  sendButton.addEventListener('click', sendMessage);\n  \n  chatInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  });\n  \n  chatInput.addEventListener('input', updateSendButton);\n  \n  // Handle incoming messages\n  scope.$watch('msg', function(msg) {\n    if (!msg || !msg.payload) return;\n    \n    try {\n      // Skip locally originated messages that come back\n      if (msg.payload.source === 'local') return;\n      \n      // Handle typing indicator\n      if (msg.payload.typing !== undefined) {\n        typingIndicator.style.display = msg.payload.typing ? 'flex' : 'none';\n        scrollToBottom();\n        return;\n      }\n      \n      // Process message\n      let messageText, messageSender, timestamp, messageId;\n   \n      if (typeof msg.payload === 'string') {\n        const payload = JSON.parse(msg.payload);\n        messageText = payload.text;\n        messageSender = 'other';\n        timestamp = new Date();\n        messageId = 'other-msg-2-' + Date.now();\n      } \n      else if (typeof msg.payload === 'object') {\n        // Skip if this is a network echo of our own message\n        if (msg.payload.messageId && msg.payload.messageId.startsWith('net-user-msg-2-')) return;\n        \n        messageId = msg.payload.messageId || 'other-msg-2-' + Date.now();\n        messageText = msg.payload.text || '';\n        messageSender = msg.payload.sender === 'user' ? 'user' : 'other';\n        timestamp = msg.payload.timestamp || new Date();\n      }\n      \n      if (messageText && !state.pendingMessages.has(messageId)) {\n        addMessage(messageText, messageSender, timestamp, messageId);\n      }\n    } catch (error) {\n      console.error(\"Error processing message:\", error);\n    }\n  });\n  \n  // Focus input on load\n  chatInput.focus();\n\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "98f339bfdf179818"
            ]
        ]
    },
    {
        "id": "0e9f31a34ee1b341",
        "type": "comment",
        "z": "63e754a63a87b5d0",
        "name": "Open P2P node configuration and update related Buyer/Seller Node",
        "info": "Open P2P node configuration and update related Buyer/Seller Node",
        "x": 560,
        "y": 60,
        "wires": []
    },
    {
        "id": "d6928ace43c87da0",
        "type": "ui_group",
        "name": "Buyer",
        "tab": "ef656de5cefe0a4d",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "84e6cabba255cc18",
        "type": "ui_group",
        "name": "Seller",
        "tab": "ef656de5cefe0a4d",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ef656de5cefe0a4d",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]