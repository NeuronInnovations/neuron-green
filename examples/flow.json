[
    {
        "id": "63e754a63a87b5d0",
        "type": "tab",
        "label": "P2P chat demo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ed43dd13100d96f6",
        "type": "tab",
        "label": "Jet Vision Demo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "01230170b01638c6",
        "type": "tab",
        "label": "Broadcast to local UDP port",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d6832356ccebf52b",
        "type": "group",
        "z": "ed43dd13100d96f6",
        "name": "",
        "style": {
            "fill": "#7fb7df",
            "label": true
        },
        "nodes": [
            "aa6841f5cb76722a",
            "c9782e6a3a57f9ba",
            "b3f21ec36e9896f4",
            "fcca5cb7f56d2e20"
        ],
        "x": 154,
        "y": 459,
        "w": 552,
        "h": 202
    },
    {
        "id": "f99e832995dc9d57",
        "type": "group",
        "z": "63e754a63a87b5d0",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#92d04f",
            "fill-opacity": "0.72"
        },
        "nodes": [
            "f63f1d72f957bea3",
            "ec50e49ac6701815",
            "dfc917dee557ea1a",
            "92afe5812c7726b4"
        ],
        "x": 74,
        "y": 79,
        "w": 812,
        "h": 142
    },
    {
        "id": "4173c8577f95a053",
        "type": "group",
        "z": "63e754a63a87b5d0",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "4e4b6386dd8d7479",
            "ce9375434e64b142",
            "b4e88767fea43f8c",
            "7670ade5d81b6624"
        ],
        "x": 74,
        "y": 319,
        "w": 832,
        "h": 142
    },
    {
        "id": "0d3b0e640caec211",
        "type": "group",
        "z": "ed43dd13100d96f6",
        "name": "",
        "style": {
            "fill": "#92d04f",
            "label": true
        },
        "nodes": [
            "69cc528a0de4ec82",
            "fd4f5879ef989991",
            "b2cb27c96698a0d2"
        ],
        "x": 254,
        "y": 79,
        "w": 552,
        "h": 202
    },
    {
        "id": "ef656de5cefe0a4d",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "eb3ea4e3e0a95b90",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "d6928ace43c87da0",
        "type": "ui_group",
        "name": "Buyer",
        "tab": "ef656de5cefe0a4d",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "84e6cabba255cc18",
        "type": "ui_group",
        "name": "Seller",
        "tab": "ef656de5cefe0a4d",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f63f1d72f957bea3",
        "type": "debug",
        "z": "63e754a63a87b5d0",
        "g": "f99e832995dc9d57",
        "name": "seller node",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 180,
        "wires": []
    },
    {
        "id": "4e4b6386dd8d7479",
        "type": "debug",
        "z": "63e754a63a87b5d0",
        "g": "4173c8577f95a053",
        "name": "buyer node",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 420,
        "wires": []
    },
    {
        "id": "ce9375434e64b142",
        "type": "ui_template",
        "z": "63e754a63a87b5d0",
        "g": "4173c8577f95a053",
        "group": "d6928ace43c87da0",
        "name": "Buyer Chat UI",
        "order": 0,
        "width": "6",
        "height": "15",
        "format": "<style>\n  .chat-container {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    background-color: #f8f9fa;\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n    margin-top: 10px;\n  }\n\n  .message-panel {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding: 16px;\n    background-color: #ffffff;\n  }\n\n  .message {\n    max-width: 80%;\n    padding: 10px 14px;\n    margin-bottom: 12px;\n    border-radius: 18px;\n    line-height: 1.4;\n    position: relative;\n    word-wrap: break-word;\n    animation: fadeIn 0.3s ease-out;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  .user-message {\n    background-color: #007bff;\n    color: white;\n    margin-left: auto;\n    border-bottom-right-radius: 4px;\n  }\n\n  .other-message {\n    background-color: #e9ecef;\n    color: #212529;\n    margin-right: auto;\n    border-bottom-left-radius: 4px;\n  }\n\n  .timestamp {\n    font-size: 11px;\n    opacity: 0.8;\n    margin-top: 4px;\n    text-align: right;\n  }\n\n  .input-area {\n    display: flex;\n    padding: 12px;\n    background-color: #ffffff;\n    border-top: 1px solid #dee2e6;\n  }\n\n  #chat-input {\n    flex-grow: 1;\n    padding: 10px 14px;\n    border: 1px solid #ced4da;\n    border-radius: 20px;\n    outline: none;\n    font-size: 14px;\n  }\n\n  #chat-input:focus {\n    border-color: #007bff;\n  }\n\n  #send-button {\n    margin-left: 10px;\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 20px;\n    cursor: pointer;\n    font-size: 14px;\n  }\n\n  #send-button:hover {\n    background-color: #0069d9;\n  }\n\n  #send-button:disabled {\n    background-color: #adb5bd;\n    cursor: not-allowed;\n  }\n\n  .typing-indicator {\n    display: flex;\n    padding: 8px 16px;\n    justify-content: flex-start;\n    gap: 4px;\n  }\n\n  .typing-dot {\n    width: 8px;\n    height: 8px;\n    background-color: #6c757d;\n    border-radius: 50%;\n    animation: typingAnimation 1.4s infinite ease-in-out;\n  }\n\n  .typing-dot:nth-child(1) {\n    animation-delay: 0s;\n  }\n\n  .typing-dot:nth-child(2) {\n    animation-delay: 0.2s;\n  }\n\n  .typing-dot:nth-child(3) {\n    animation-delay: 0.4s;\n  }\n\n  @keyframes typingAnimation {\n\n    0%,\n    60%,\n    100% {\n      transform: translateY(0);\n    }\n\n    30% {\n      transform: translateY(-4px);\n    }\n  }\n</style>\n\n<div class=\"chat-container\">\n  <div id=\"message-panel\" class=\"message-panel\"></div>\n  <div id=\"typing-indicator\" class=\"typing-indicator\" style=\"display: none;\">\n    <div class=\"typing-dot\"></div>\n    <div class=\"typing-dot\"></div>\n    <div class=\"typing-dot\"></div>\n  </div>\n  <div class=\"input-area\">\n    <input type=\"text\" id=\"chat-input\" placeholder=\"Type your message...\" autocomplete=\"off\" />\n    <button id=\"send-button\" disabled>Send</button>\n  </div>\n</div>\n\n<script>\n  (function(scope) {\n  const state = {\n    messageCount: 0,\n    isTyping: false,\n    pendingMessages: new Set()\n  };\n  \n  const messagePanel = document.getElementById('message-panel');\n  const chatInput = document.getElementById('chat-input');\n  const sendButton = document.getElementById('send-button');\n  const typingIndicator = document.getElementById('typing-indicator');\n  \n  function formatTimestamp(date = new Date()) {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  }\n  \n  function scrollToBottom() {\n    messagePanel.scrollTop = messagePanel.scrollHeight;\n  }\n  \n  function addMessage(text, sender, timestamp, messageId) {\n    const id = messageId || 'msg-' + state.messageCount++ + '-' + Date.now();\n    \n    if (state.pendingMessages.has(id)) return;\n    state.pendingMessages.add(id);\n    \n    const messageElement = document.createElement('div');\n    messageElement.className = `message ${sender}-message`;\n    messageElement.id = id;\n    messageElement.innerHTML = `\n      ${text}\n      <div class=\"timestamp\">${formatTimestamp(timestamp ? new Date(timestamp) : new Date())}</div>\n    `;\n    \n    messagePanel.appendChild(messageElement);\n    scrollToBottom();\n  }\n  \n  function updateSendButton() {\n    sendButton.disabled = chatInput.value.trim() === '';\n  }\n  \n  function sendMessage() {\n    const messageText = chatInput.value.trim();\n    if (!messageText) return;\n    \n    const timestamp = new Date();\n    const messageId = 'user-msg-' + Date.now();\n    \n    // Add to UI immediately with unique ID\n    addMessage(messageText, 'user', timestamp, messageId);\n    \n    // Send to Node-RED with a different ID to prevent echo\n    if (typeof scope.send === 'function') {\n      scope.send({ \n        payload: { \n          text: messageText, \n          sender: 'user',\n          timestamp: timestamp.toISOString(),\n          messageId: 'net-' + messageId, // Different prefix for network messages\n          instance: 'chat',\n          source: 'local' // Mark as locally originated\n        } \n      });\n    }\n    \n    chatInput.value = '';\n    updateSendButton();\n    chatInput.focus();\n  }\n  \n  // Event listeners\n  sendButton.addEventListener('click', sendMessage);\n  \n  chatInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  });\n  \n  chatInput.addEventListener('input', updateSendButton);\n  \n  // Handle incoming messages\n  scope.$watch('msg', function(msg) {\n    if (!msg || !msg.payload) return;\n    \n    try {\n      // Skip locally originated messages that come back\n      if (msg.payload.source === 'local') return;\n      \n      // Handle typing indicator\n      if (msg.payload.typing !== undefined) {\n        typingIndicator.style.display = msg.payload.typing ? 'flex' : 'none';\n        scrollToBottom();\n        return;\n      }\n      \n      // Process message\n      let messageText, messageSender, timestamp, messageId;\n      \n      if (typeof msg.payload === 'string') {\n        const payload = JSON.parse(msg.payload);\n        messageText = payload.text;\n       // messageText = msg.payload;\n        messageSender = 'other';\n        timestamp = new Date();\n        messageId = 'other-msg-' + Date.now();\n      } \n      else if (typeof msg.payload === 'object') {\n        // Skip if this is a network echo of our own message\n        if (msg.payload.messageId && msg.payload.messageId.startsWith('net-user-msg-')) return;\n        \n        messageId = msg.payload.messageId || 'other-msg-' + Date.now();\n        messageText = msg.payload.text || '';\n        messageSender = msg.payload.sender === 'user' ? 'user' : 'other';\n        timestamp = msg.payload.timestamp || new Date();\n      }\n      \n      if (messageText && !state.pendingMessages.has(messageId)) {\n        addMessage(messageText, messageSender, timestamp, messageId);\n      }\n    } catch (error) {\n      console.error(\"Error processing message:\", error);\n    }\n  });\n  \n  // Focus input on load\n  chatInput.focus();\n\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "7670ade5d81b6624"
            ]
        ]
    },
    {
        "id": "ec50e49ac6701815",
        "type": "ui_template",
        "z": "63e754a63a87b5d0",
        "g": "f99e832995dc9d57",
        "group": "84e6cabba255cc18",
        "name": "Seller Chat UI",
        "order": 0,
        "width": "6",
        "height": "15",
        "format": "<style>\n  .chat-container-2 {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    background-color: #f8f9fa;\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n    margin-top: 10px;\n  }\n\n  .message-panel-2 {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding: 16px;\n    background-color: #ffffff;\n  }\n\n  .message {\n    max-width: 80%;\n    padding: 10px 14px;\n    margin-bottom: 12px;\n    border-radius: 18px;\n    line-height: 1.4;\n    position: relative;\n    word-wrap: break-word;\n    animation: fadeIn 0.3s ease-out;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  .user-message {\n    background-color: #007bff;\n    color: white;\n    margin-left: auto;\n    border-bottom-right-radius: 4px;\n  }\n\n  .other-message {\n    background-color: #e9ecef;\n    color: #212529;\n    margin-right: auto;\n    border-bottom-left-radius: 4px;\n  }\n\n  .timestamp {\n    font-size: 11px;\n    opacity: 0.8;\n    margin-top: 4px;\n    text-align: right;\n  }\n\n  .input-area {\n    display: flex;\n    padding: 12px;\n    background-color: #ffffff;\n    border-top: 1px solid #dee2e6;\n  }\n\n  #chat-input-2 {\n    flex-grow: 1;\n    padding: 10px 14px;\n    border: 1px solid #ced4da;\n    border-radius: 20px;\n    outline: none;\n    font-size: 14px;\n  }\n\n  #chat-input-2:focus {\n    border-color: #007bff;\n  }\n\n  #send-button-2 {\n    margin-left: 10px;\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 20px;\n    cursor: pointer;\n    font-size: 14px;\n  }\n\n  #send-button-2:hover {\n    background-color: #0069d9;\n  }\n\n  #send-button-2:disabled {\n    background-color: #adb5bd;\n    cursor: not-allowed;\n  }\n\n  .typing-indicator {\n    display: flex;\n    padding: 8px 16px;\n    justify-content: flex-start;\n    gap: 4px;\n  }\n\n  .typing-dot {\n    width: 8px;\n    height: 8px;\n    background-color: #6c757d;\n    border-radius: 50%;\n    animation: typingAnimation 1.4s infinite ease-in-out;\n  }\n\n  .typing-dot:nth-child(1) {\n    animation-delay: 0s;\n  }\n\n  .typing-dot:nth-child(2) {\n    animation-delay: 0.2s;\n  }\n\n  .typing-dot:nth-child(3) {\n    animation-delay: 0.4s;\n  }\n\n  @keyframes typingAnimation {\n\n    0%,\n    60%,\n    100% {\n      transform: translateY(0);\n    }\n\n    30% {\n      transform: translateY(-4px);\n    }\n  }\n</style>\n\n<div class=\"chat-container-2\">\n  <div id=\"message-panel-2\" class=\"message-panel-2\"></div>\n  <div id=\"typing-indicator-2\" class=\"typing-indicator\" style=\"display: none;\">\n    <div class=\"typing-dot\"></div>\n    <div class=\"typing-dot\"></div>\n    <div class=\"typing-dot\"></div>\n  </div>\n  <div class=\"input-area\">\n    <input type=\"text\" id=\"chat-input-2\" placeholder=\"Type your message...\" autocomplete=\"off\" />\n    <button id=\"send-button-2\" disabled>Send</button>\n  </div>\n</div>\n\n<script>\n  (function(scope) {\n  const state = {\n    messageCount: 0,\n    isTyping: false,\n    pendingMessages: new Set()\n  };\n  \n  const messagePanel = document.getElementById('message-panel-2');\n  const chatInput = document.getElementById('chat-input-2');\n  const sendButton = document.getElementById('send-button-2');\n  const typingIndicator = document.getElementById('typing-indicator-2');\n  \n  function formatTimestamp(date = new Date()) {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  }\n  \n  function scrollToBottom() {\n    messagePanel.scrollTop = messagePanel.scrollHeight;\n  }\n  \n  function addMessage(text, sender, timestamp, messageId) {\n    const id = messageId || 'msg-' + state.messageCount++ + '-' + Date.now();\n    \n    if (state.pendingMessages.has(id)) return;\n    state.pendingMessages.add(id);\n    \n    const messageElement = document.createElement('div');\n    messageElement.className = `message ${sender}-message`;\n    messageElement.id = id;\n    messageElement.innerHTML = `\n      ${text}\n      <div class=\"timestamp\">${formatTimestamp(timestamp ? new Date(timestamp) : new Date())}</div>\n    `;\n    \n    messagePanel.appendChild(messageElement);\n    scrollToBottom();\n  }\n  \n  function updateSendButton() {\n    sendButton.disabled = chatInput.value.trim() === '';\n  }\n  \n  function sendMessage() {\n    const messageText = chatInput.value.trim();\n    if (!messageText) return;\n    \n    const timestamp = new Date();\n    const messageId = 'user-msg-2-' + Date.now();\n    \n    // Add to UI immediately with unique ID\n    addMessage(messageText, 'user', timestamp, messageId);\n    \n    // Send to Node-RED with a different ID to prevent echo\n    if (typeof scope.send === 'function') {\n      scope.send({ \n        payload: { \n          text: messageText, \n          sender: 'user',\n          timestamp: timestamp.toISOString(),\n          messageId: 'net-' + messageId, // Different prefix for network messages\n          instance: 'chat-2',\n          source: 'local' // Mark as locally originated\n        } \n      });\n    }\n    \n    chatInput.value = '';\n    updateSendButton();\n    chatInput.focus();\n  }\n  \n  // Event listeners\n  sendButton.addEventListener('click', sendMessage);\n  \n  chatInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  });\n  \n  chatInput.addEventListener('input', updateSendButton);\n  \n  // Handle incoming messages\n  scope.$watch('msg', function(msg) {\n    if (!msg || !msg.payload) return;\n    \n    try {\n      // Skip locally originated messages that come back\n      if (msg.payload.source === 'local') return;\n      \n      // Handle typing indicator\n      if (msg.payload.typing !== undefined) {\n        typingIndicator.style.display = msg.payload.typing ? 'flex' : 'none';\n        scrollToBottom();\n        return;\n      }\n      \n      // Process message\n      let messageText, messageSender, timestamp, messageId;\n   \n      if (typeof msg.payload === 'string') {\n        const payload = JSON.parse(msg.payload);\n        messageText = payload.text;\n        messageSender = 'other';\n        timestamp = new Date();\n        messageId = 'other-msg-2-' + Date.now();\n      } \n      else if (typeof msg.payload === 'object') {\n        // Skip if this is a network echo of our own message\n        if (msg.payload.messageId && msg.payload.messageId.startsWith('net-user-msg-2-')) return;\n        \n        messageId = msg.payload.messageId || 'other-msg-2-' + Date.now();\n        messageText = msg.payload.text || '';\n        messageSender = msg.payload.sender === 'user' ? 'user' : 'other';\n        timestamp = msg.payload.timestamp || new Date();\n      }\n      \n      if (messageText && !state.pendingMessages.has(messageId)) {\n        addMessage(messageText, messageSender, timestamp, messageId);\n      }\n    } catch (error) {\n      console.error(\"Error processing message:\", error);\n    }\n  });\n  \n  // Focus input on load\n  chatInput.focus();\n\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "92afe5812c7726b4"
            ]
        ]
    },
    {
        "id": "0e9f31a34ee1b341",
        "type": "comment",
        "z": "63e754a63a87b5d0",
        "name": "Open P2P node configuration and update related Buyer/Seller Node",
        "info": "Open P2P node configuration and update related Buyer/Seller Node",
        "x": 340,
        "y": 40,
        "wires": []
    },
    {
        "id": "b4e88767fea43f8c",
        "type": "buyer config",
        "z": "63e754a63a87b5d0",
        "g": "4173c8577f95a053",
        "name": "Chat Buyer Config",
        "sellerEvmAddress": "[\"0x0Ed6aC20e02C59CdCe6Bd0cbF9A1f6F224e0E399\"]",
        "sellerDevices": [
            {
                "contract": "0x0Ed6aC20e02C59CdCe6Bd0cbF9A1f6F224e0E399",
                "peerID": "",
                "stdOutTopic": "0.06144861",
                "stdInTopic": "6144859",
                "stdErrTopic": "6144860",
                "services": [
                    {
                        "serviceID": "0",
                        "price": "0"
                    }
                ]
            }
        ],
        "smartContract": "chat",
        "deviceType": "cloud",
        "description": "",
        "x": 190,
        "y": 360,
        "wires": []
    },
    {
        "id": "dfc917dee557ea1a",
        "type": "seller config",
        "z": "63e754a63a87b5d0",
        "g": "f99e832995dc9d57",
        "name": "Chat Seller Config",
        "deviceRole": "Accountant",
        "deviceName": "Ui",
        "smartContract": "chat",
        "serialNumber": "n/a",
        "deviceType": "n/a",
        "price": "1",
        "description": "",
        "buyerEvmAddress": "[\"0x168505bED28c452992B290315802789f7721C90C\"]",
        "buyerDevices": [],
        "x": 210,
        "y": 120,
        "wires": []
    },
    {
        "id": "92afe5812c7726b4",
        "type": "neuron-p2p",
        "z": "63e754a63a87b5d0",
        "g": "f99e832995dc9d57",
        "name": "chat seller p2p",
        "selectedNode": "dfc917dee557ea1a",
        "description": "",
        "x": 500,
        "y": 180,
        "wires": [
            [
                "f63f1d72f957bea3"
            ]
        ]
    },
    {
        "id": "7670ade5d81b6624",
        "type": "neuron-p2p",
        "z": "63e754a63a87b5d0",
        "g": "4173c8577f95a053",
        "name": "chat buyer p2p",
        "selectedNode": "b4e88767fea43f8c",
        "description": "",
        "x": 500,
        "y": 420,
        "wires": [
            [
                "4e4b6386dd8d7479",
                "ce9375434e64b142"
            ]
        ]
    },
    {
        "id": "63cbfabea001c026",
        "type": "udp in",
        "z": "ed43dd13100d96f6",
        "name": "UDP IN (JETVISION IN)",
        "iface": "",
        "port": "5005",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "utf8",
        "x": 120,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "aa6841f5cb76722a",
        "type": "debug",
        "z": "ed43dd13100d96f6",
        "g": "d6832356ccebf52b",
        "name": "Print to console",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 620,
        "wires": []
    },
    {
        "id": "69cc528a0de4ec82",
        "type": "comment",
        "z": "ed43dd13100d96f6",
        "g": "0d3b0e640caec211",
        "name": "seller listening to local udp and sending to whoever is conneccted",
        "info": "",
        "x": 520,
        "y": 120,
        "wires": []
    },
    {
        "id": "c9782e6a3a57f9ba",
        "type": "comment",
        "z": "ed43dd13100d96f6",
        "g": "d6832356ccebf52b",
        "name": "buyer getting streams from seller and printing to the debug screen",
        "info": "",
        "x": 420,
        "y": 500,
        "wires": []
    },
    {
        "id": "fd4f5879ef989991",
        "type": "seller config",
        "z": "ed43dd13100d96f6",
        "g": "0d3b0e640caec211",
        "name": "Jetvision Seller Config",
        "deviceRole": "sensor",
        "deviceName": "adsb",
        "smartContract": "jetvision",
        "serialNumber": "11111",
        "deviceType": "sensor",
        "price": "1",
        "description": "",
        "buyerEvmAddress": "[\"0x8a52eb9A5b58D69e699F022BFB65CC498De8Cef8\"]",
        "buyerDevices": [],
        "x": 680,
        "y": 180,
        "wires": []
    },
    {
        "id": "b3f21ec36e9896f4",
        "type": "buyer config",
        "z": "ed43dd13100d96f6",
        "g": "d6832356ccebf52b",
        "name": "Jetvision Buyer Config",
        "sellerEvmAddress": "[\"0x8a52eb9A5b58D69e699F022BFB65CC498De8Cef8\"]",
        "sellerDevices": [
            {
                "contract": "0x8a52eb9A5b58D69e699F022BFB65CC498De8Cef8",
                "peerID": "test123",
                "stdOutTopic": "0.06097555",
                "stdInTopic": "6097556",
                "stdErrTopic": "6097557",
                "services": [
                    {
                        "serviceID": "0",
                        "price": "100"
                    }
                ]
            }
        ],
        "smartContract": "jetvision",
        "deviceType": "test",
        "description": "",
        "x": 280,
        "y": 560,
        "wires": []
    },
    {
        "id": "b2cb27c96698a0d2",
        "type": "neuron-p2p",
        "z": "ed43dd13100d96f6",
        "g": "0d3b0e640caec211",
        "name": "jetvision p2p",
        "selectedNode": "fd4f5879ef989991",
        "description": "",
        "x": 670,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "fcca5cb7f56d2e20",
        "type": "neuron-p2p",
        "z": "ed43dd13100d96f6",
        "g": "d6832356ccebf52b",
        "name": "jetvision buyer p2p",
        "selectedNode": "b3f21ec36e9896f4",
        "description": "",
        "x": 270,
        "y": 620,
        "wires": [
            [
                "aa6841f5cb76722a"
            ]
        ]
    },
    {
        "id": "a1b2c3d4.56789",
        "type": "inject",
        "z": "01230170b01638c6",
        "d": true,
        "name": "Trigger Stream",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "b2c3d4e5.67890"
            ]
        ]
    },
    {
        "id": "b2c3d4e5.67890",
        "type": "function",
        "z": "01230170b01638c6",
        "name": "Create Message Stream",
        "func": "// Sample data array\nconst flightData = [\n    {\"uti\":1729178284,\"ns\":284211687,\"hex\":\"43C563\",\"fli\":\"AXIS41\",\"src\":\"?\",\"ava\":\"\",\"lat\":null,\"lon\":null,\"alt\":18025,\"gda\":\"A\",\"spd\":null,\"trk\":null,\"vrt\":null,\"tmp\":null,\"wsp\":null,\"wdi\":null,\"cat\":\"A6\",\"org\":null,\"dst\":null,\"opr\":\"HAWK\",\"typ\":\"HAWK\",\"reg\":\"ZK032\",\"dis\":null,\"dbm\":-71,\"cou\":\"U.K.\",\"squ\":\"6440\",\"tru\":820,\"lla\":null,\"alr\":0,\"spi\":false,\"timeRecorded\":1729178284613},\n    {\"uti\":1729178284,\"ns\":296999671,\"hex\":\"4079F4\",\"fli\":\"GLDGF\",\"src\":\"A\",\"ava\":\"A\",\"lat\":51.52923,\"lon\":-2.36961,\"alt\":2625,\"gda\":\"A\",\"spd\":134,\"trk\":223,\"vrt\":-128,\"tmp\":null,\"wsp\":null,\"wdi\":null,\"cat\":\"A1\",\"org\":null,\"dst\":null,\"opr\":\"LDG\",\"typ\":\"DA42\",\"reg\":\"G-LDGF\",\"dis\":42.7,\"dbm\":-74,\"cou\":\"U.K.\",\"squ\":\"3737\",\"tru\":476,\"lla\":1,\"mop\":2,\"alr\":0,\"spi\":false,\"tcm\":0,\"ape\":false,\"pic\":11,\"nacp\":10,\"sil\":3,\"sda\":2,\"altg\":2825,\"qnhs\":1010.4,\"alts\":2496,\"timeRecorded\":1729178284613},\n    {\"uti\":1729178284,\"ns\":313035437,\"hex\":\"40792E\",\"fli\":\"SHT7P\",\"src\":\"A\",\"ava\":\"A\",\"lat\":54.47077,\"lon\":-3.16548,\"alt\":36925,\"gda\":\"A\",\"spd\":436,\"trk\":154,\"vrt\":640,\"tmp\":-51,\"wsp\":49,\"wdi\":223,\"cat\":\"A3\",\"org\":\"EGPF\",\"dst\":\"EGLL\",\"opr\":\"BAW\",\"typ\":\"A20N\",\"reg\":\"G-TTNK\",\"dis\":289.9,\"dbm\":-81,\"cou\":\"U.K.\",\"squ\":\"1165\",\"tru\":177,\"lla\":4,\"mop\":2,\"alr\":0,\"spi\":false,\"tcm\":1,\"ape\":false,\"pic\":11,\"nacp\":9,\"sil\":3,\"sda\":3,\"altg\":37050,\"qnhs\":1012.8,\"alts\":36992,\"hdgs\":159,\"timeRecorded\":1729178284613},\n    {\"uti\":1729178283,\"ns\":517067031,\"hex\":\"AB84AB\",\"fli\":\"DAL37\",\"src\":\"A\",\"ava\":\"A\",\"lat\":52.18414,\"lon\":-0.79842,\"alt\":14025,\"gda\":\"A\",\"spd\":436,\"trk\":328,\"vrt\":2112,\"tmp\":-5,\"wsp\":25,\"wdi\":197,\"cat\":\"A5\",\"org\":\"EGLL\",\"dst\":\"KPDX\",\"opr\":null,\"typ\":null,\"reg\":\"N841MH\",\"dis\":107.9,\"dbm\":-79,\"cou\":\"USA \",\"squ\":\"7662\",\"tru\":134,\"lla\":4,\"mop\":2,\"alr\":0,\"spi\":false,\"tcm\":1,\"ape\":false,\"pic\":11,\"nacp\":11,\"sil\":3,\"sda\":2,\"altg\":14100,\"qnhs\":1013.6,\"alts\":16000,\"hdgs\":325,\"timeRecorded\":1729178284613}\n];\n\n// Configure stream behavior\nconst config = {\n    messagesPerSecond: 2,  // Adjust speed\n    loop: true,           // Continuous stream\n    randomOrder: false    // Send in file order\n};\n\n// Initialize counter\nif (!context.counter) {\n    context.counter = 0;\n    context.lastSend = 0;\n}\n\n// Get next message\nlet msgIndex;\nif (config.randomOrder) {\n    msgIndex = Math.floor(Math.random() * flightData.length);\n} else {\n    msgIndex = context.counter % flightData.length;\n    context.counter++;\n}\n\n// Prepare message\nconst message = flightData[msgIndex];\n\n// Set up next trigger if looping\nif (config.loop) {\n    const now = Date.now();\n    const delay = 1000 / config.messagesPerSecond;\n    \n    if (now - context.lastSend >= delay) {\n        context.lastSend = now;\n        return { payload: JSON.stringify(message) };\n    } else {\n        node.send(null); // Skip this cycle\n        return null;\n    }\n}\n\nreturn { payload: JSON.stringify(message) };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 100,
        "wires": [
            [
                "c3d4e5f6.78901"
            ]
        ]
    },
    {
        "id": "c3d4e5f6.78901",
        "type": "delay",
        "z": "01230170b01638c6",
        "name": "Throttle Stream",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "100",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 620,
        "y": 100,
        "wires": [
            [
                "d4e5f6g7.89012"
            ]
        ]
    },
    {
        "id": "d4e5f6g7.89012",
        "type": "udp out",
        "z": "01230170b01638c6",
        "name": "UDP Output",
        "addr": "127.0.0.1",
        "iface": "",
        "port": "5005",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 830,
        "y": 100,
        "wires": []
    }
]